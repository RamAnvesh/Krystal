import org.checkerframework.checker.nullness.qual.Nullable;
import org.checkerframework.checker.nullness.qual.NonNull;

package java.lang;

class String {
  public String formatted(@Nullable Object... args) {

  }
}

package java.util.concurrent;

class ForkJoinPool{

  ForkJoinPool(int parallelism,
      ForkJoinWorkerThreadFactory factory,
      @Nullable UncaughtExceptionHandler handler,
      boolean asyncMode,
      int corePoolSize,
      int maximumPoolSize,
      int minimumRunnable,
      @Nullable Predicate<? super ForkJoinPool> saturate,
      long keepAliveTime,
      TimeUnit unit);
}

package java.util;

public class Arrays {
  @SuppressWarnings("unchecked")
  public static <T> @NonNull T[] copyOfRange(T[] original, int from, int to);
}

public class Objects {
  public static <T> @NonNull T requireNonNull(T obj);
  public static <T> @NonNull T requireNonNull(T obj, String message);
}

package javax.annotation.processing;

class Messager {
  void printMessage(Diagnostic.Kind kind, CharSequence msg, @Nullable Element e);
  void printMessage(Diagnostic.Kind kind,
      CharSequence msg,
      @Nullable Element e,
      @Nullable AnnotationMirror a,
      @Nullable AnnotationValue v);
}

package javax.lang.model.util;

class Elements {
  @Nullable TypeElement getTypeElement(CharSequence name);
}


