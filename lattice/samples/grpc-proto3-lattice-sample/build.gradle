plugins {
    id 'java'
    id 'application'
    id 'com.flipkart.krystal' version "${krystal_version}"
    id 'com.flipkart.java.code.standard' version '4.0'
    id 'com.google.protobuf' version '0.9.5'
}

application {
    mainClass = 'com.flipkart.krystal.lattice.samples.grpc.proto.sampleProtoService.app.SampleGrpcLatticeApp_Impl'
}

dependencies {
    /** START: Lattice dependencies **/

    implementation platform("com.flipkart.krystal:lattice-bom:${lattice_version}")
    annotationProcessor platform("com.flipkart.krystal:lattice-bom:${lattice_version}")

    implementation 'com.flipkart.krystal:lattice-grpc'
    implementation 'com.flipkart.krystal:lattice-guice-servlet'
    implementation 'com.flipkart.krystal:lattice-core'
    implementation 'com.flipkart.krystal:vajram-java-sdk'
    implementation 'com.flipkart.krystal:vajram-json'
    implementation 'com.flipkart.krystal:vajram-protobuf3'

    annotationProcessor 'com.flipkart.krystal:lattice-codegen'
    annotationProcessor 'com.flipkart.krystal:lattice-grpc-codegen'
    annotationProcessor 'com.flipkart.krystal:lattice-guice-codegen'
    annotationProcessor 'com.flipkart.krystal:lattice-protobuf-codegen'
    annotationProcessor 'com.flipkart.krystal:vajram-codegen'
    annotationProcessor 'com.flipkart.krystal:vajram-json-codegen'
    annotationProcessor 'com.flipkart.krystal:vajram-protobuf-codegen'

    testImplementation project(':vajram:extensions:guice:vajram-guice')
    testImplementation project(':vajram:vajram-krystex')

    /** END: Lattice dependencies **/


    runtimeOnly 'jakarta.servlet:jakarta.servlet-api'
    compileOnly "org.projectlombok:lombok:$lombok_version"

    implementation 'com.google.inject.extensions:guice-servlet'
    implementation 'com.google.protobuf:protobuf-java'
    implementation 'jakarta.inject:jakarta.inject-api'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'jakarta.enterprise:jakarta.enterprise.cdi-api:4.1.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    implementation platform('org.assertj:assertj-bom:3.25.2')
    testImplementation 'org.assertj:assertj-core'


}

sourceSets {
    main {
        proto {
            srcDir 'build/generated/sources/vajramModels/protobuf/main'
        }
        java {
            'build/generated/source/proto/main/java'
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobuf_version}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpc_version}"
        }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

tasks.named('extractIncludeProto').configure { mustRunAfter('codeGenVajramModels') }
tasks.named('extractProto').configure { mustRunAfter('codeGenVajramModels') }
tasks.named('generateProto').configure { mustRunAfter('codeGenVajramModels') }

extraJavaModuleInfo {
    failOnMissingModuleInfo = false
}

checkerFramework {
    excludeTests = true
}