plugins {
    id 'com.flipkart.java.code.standard' version '4.0'
    id 'org.gradlex.extra-java-module-info' version '1.11'
    id 'java-test-fixtures'
}

ext {
    clojarsusername = project.properties['clojarsusername'] ?: ""
    clojarspassword = project.properties['clojarspassword'] ?: ""
    krystal_version = '10.0.0.2-SNAPSHOT'
    lattice_version = '0.0.11'

    protobuf_version = '4.31.1'
    grpc_version = '1.73.0'
    quarkus_version = '3.23.2'
    lombok_version = '1.18.36'
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'idea'

    group = 'com.flipkart.krystal'
    if (project.path.startsWith(':lattice:')) {
        version = project.lattice_version
    } else {
        version = project.krystal_version
    }

    publishing {
        repositories {
            maven {
                url = "https://clojars.org/repo"
                credentials {
                    username = rootProject.ext.clojarsusername
                    password = rootProject.ext.clojarspassword
                }
            }
        }
        publications.withType(MavenPublication).configureEach {
            pom {
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
}

configure(subprojects.findAll {
    //Exclude non java projects
    it.name !in (['krystal-bom', 'lattice-bom', 'code-coverage-report'] as Set)
            // Exclude sample projects so that they are configured independently making
            // them a better representation of how clients should use krystal
            && !it.name.contains('sample')
}) {
    apply plugin: 'java-library'
    apply plugin: 'org.gradlex.extra-java-module-info'

    apply plugin: 'com.flipkart.java.code.standard'

    dependencies {
        api 'com.google.guava:guava'
        implementation 'org.slf4j:slf4j-api'
        implementation 'jakarta.inject:jakarta.inject-api'
        implementation 'com.google.auto.service:auto-service-annotations'
        annotationProcessor 'com.google.auto.service:auto-service'

        implementation 'org.checkerframework:checker-qual'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testImplementation 'org.assertj:assertj-core'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.checkerframework:checker-qual'

        compileOnly 'com.google.auto.value:auto-value-annotations'
        annotationProcessor 'com.google.auto.value:auto-value'

        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        api platform('org.mockito:mockito-bom:5.17.0')
        api platform('org.assertj:assertj-bom:3.25.2')
        api platform('io.github.resilience4j:resilience4j-bom:2.2.0')
        api platform('com.google.inject:guice-bom:7.0.0')
        api platform('org.slf4j:slf4j-bom:2.0.13')
        api platform('com.fasterxml.jackson:jackson-bom:2.18.3')
        api platform("com.google.protobuf:protobuf-bom:${protobuf_version}")
        api platform("io.grpc:grpc-bom:${grpc_version}")

        constraints {
            implementation "org.projectlombok:lombok:$lombok_version"
            implementation 'com.google.api.grpc:proto-google-common-protos:2.56.0'
            implementation 'com.google.auto.service:auto-service-annotations:1.1.1'
            implementation 'com.google.code.findbugs:jsr305:3.0.2'
            api 'com.google.guava:guava:33.4.8-jre'
            implementation 'com.google.guava:guava:33.4.8-jre'
            implementation 'com.google.j2objc:j2objc-annotations:3.0.0'
            implementation 'com.squareup:javapoet:1.13.0'
            implementation 'commons-cli:commons-cli:1.6.0'
            implementation 'jakarta.inject:jakarta.inject-api:2.0.1'
            implementation 'jakarta.ws.rs:jakarta.ws.rs-api:4.0.0'
            implementation 'javax.annotation:javax.annotation-api:1.3.2'
            implementation 'org.reflections:reflections:0.10.2'
            implementation 'org.slf4j:slf4j-api:2.0.11'
            implementation 'org.yaml:snakeyaml:2.2'
            implementation 'org.jboss.resteasy:resteasy-vertx:7.0.0.Beta1'
            implementation 'org.jboss.resteasy:resteasy-core:7.0.0.Beta1'
            implementation 'org.javassist:javassist:3.30.2-GA'

            runtimeOnly 'jakarta.servlet:jakarta.servlet-api:6.1.0'
            implementation 'jakarta.enterprise:jakarta.enterprise.cdi-api:4.1.0'


            compileOnly "org.projectlombok:lombok:$lombok_version"
            compileOnly 'com.google.auto.value:auto-value-annotations:1.11.0'
            compileOnly 'org.jetbrains:annotations:26.0.2'

            annotationProcessor "org.projectlombok:lombok:$lombok_version"
            annotationProcessor 'com.google.auto.service:auto-service:1.1.1'
            annotationProcessor 'com.google.auto.value:auto-value:1.11.0'
            annotationProcessor 'com.google.guava:failureaccess:1.0.2'
            annotationProcessor 'com.google.j2objc:j2objc-annotations:3.0.0'

            testImplementation 'com.google.j2objc:j2objc-annotations:3.0.0'

            testAnnotationProcessor "org.projectlombok:lombok:$lombok_version"
            testAnnotationProcessor 'com.google.guava:failureaccess:1.0.2'
            testAnnotationProcessor 'com.google.j2objc:j2objc-annotations:3.0.0'

        }
    }

    configurations.configureEach {
        exclude group: 'com.google.guava', module: 'listenablefuture'
    }

    //Exclude modules which should not be published or have custom publishing config
    if (project.name != 'vajram-lang' && project.subprojects.isEmpty()) {
        publishing {
            publications {
                maven(MavenPublication) {
                    groupId = project.group
                    artifactId = project.name
                    version = project.version
                    from components.java
                }
            }
        }
    }

    checkerFramework {
        excludeTests = true
    }

    java {
        withSourcesJar()
    }

    compileJava {
        options.compilerArgs += ['-Xlint:unchecked', '-parameters']
        options.deprecation = true
    }

    tasks.named('sourcesJar').configure { mustRunAfter('compileJava') }

    //We need to dynamically add module info to old jars which have not yet modularized and do not have "Automatic-Module-Name" in their MANIFEST.MF
    extraJavaModuleInfo {
        module('com.google.auto.value:auto-value', 'com.google.auto.value')
        module('com.google.auto.service:auto-service', 'com.google.auto.auto.service')
        module('com.google.auto.value:auto-value-annotations', 'com.google.auto.value.annotations')
        module('com.google.auto:auto-common', 'com.google.auto.common')
        module('com.google.code.findbugs:jsr305', 'com.google.code.findbugs.jsr305')

        module('aopalliance:aopalliance', 'aopalliance')
        module('com.github.kevinstern:software-and-algorithms', 'com.github.kevinstern.software.and.algorithms')
        module('javax.cache:cache-api', 'javax.cache.api')
        module('javax.inject:javax.inject', 'javax.inject')

        module('gradle-api-8.14.3.jar', 'gradle.api')
        module('gradle-installation-beacon-8.14.3.jar', 'gradle.installation.beacon')
        module('gradle-test-kit-8.14.3.jar', 'gradle.test.kit')

        module('ch.qos.reload4j:reload4j', 'ch.qos.reload4j')
        module('com.flipkart.krystal:vajram-codegen', 'com.flipkart.krystal.vajram.codegen')
        module('org.abego.treelayout:org.abego.treelayout.core', 'org.abego.treelayout.core')
        module('org.antlr:ST4', 'org.antlr.antlr.ST4')
        module('org.antlr:antlr-runtime', 'org.antlr.antlr.runtime')
        module('org.antlr:antlr4', 'org.antlr.antlr4')
        module('org.hdrhistogram:HdrHistogram', 'org.hdrhistogram')
        module('org.latencyutils:LatencyUtils', 'org.latencyutils')
        module('org.slf4j:slf4j-reload4j', 'org.slf4j.reload4j')

        //These already have a module name
        knownModule('org.checkerframework:checker-qual', 'org.checkerframework.checker.qual')
        knownModule('org.slf4j:slf4j-api', 'org.slf4j')
        knownModule('jakarta.inject:jakarta.inject-api', 'jakarta.inject')
        knownModule('com.google.guava:guava', 'com.google.common')
        knownModule('com.google.auto.service:auto-service-annotations', 'com.google.auto.service')
        knownModule('org.antlr:antlr4-runtime', 'org.antlr.antlr4.runtime')
        knownModule('com.ibm.icu:icu4j', 'com.ibm.icu.icu4j')
        knownModule('com.squareup:javapoet', 'com.squareup.javapoet')
        knownModule('org.projectlombok:lombok', 'lombok')
        knownModule('com.google.j2objc:j2objc-annotations', 'com.google.j2objc.annotations')
        knownModule('org.reflections:reflections', 'org.reflections')
        knownModule('org.javassist:javassist', 'org.javassist')

        knownModule('com.flipkart.krystal:vajram-java-sdk', 'flipkart.krystal.vajram')
        knownModule('com.flipkart.krystal:krystal-codegen-common', 'flipkart.krystal.codegen.common')
        knownModule('com.flipkart.krystal:vajram-codegen-common', 'flipkart.krystal.vajram.codegen.common')
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    println """\
=======================================
Tasks
=======================================
"""
    taskGraph.getAllTasks().eachWithIndex { task, n ->
        println "${n + 1} $task"
        task.dependsOn.eachWithIndex { depObj, m -> println "  ${m + 1} $depObj" }
    }
}